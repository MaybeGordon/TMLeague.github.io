@page "/league/{leagueId}/index"
@using TMLeague.Components
@using TMLeague.Services
@inject LeagueService LeagueService
@inject IJSRuntime Js

<h3>@LeagueDetails?.Name</h3>

<p class="lead d-none d-sm-block d-md-block d-lg-block d-xl-block">
    @LeagueDetails?.Description
</p>

<div class="container">
    <div class="row">
        <div class="col-sm-3 overflow-auto">
            <Champion></Champion>
        </div>
        <div class="col-sm-3 overflow-auto">
            <AllChampions></AllChampions>
        </div>
        <div class="col-sm-6 overflow-auto">
            <HallOfFame></HallOfFame>
        </div>
    </div>
    <div class="row">
        <div class="col overflow-auto">
            @if (LeagueDetails == null)
            {
                <Loading></Loading>
            }
            else
            {
                <SeasonSummary LeagueId="@LeagueId" SeasonId="@SeasonId"></SeasonSummary>
            }
        </div>
    </div>
</div>

<footer class="text-white-50 d-none d-sm-block d-md-block d-lg-block d-xl-block">
    @if (LeagueDetails?.Rules != null)
    {
        <p class="mb-0">Rules of the league are <a id="league-rules-link" href="@LeagueDetails.Rules" class="text-primary">here</a>.</p>
    }
    @if (LeagueDetails?.Discord != null)
    {
        <p class="mb-0">Join discord server <a id="league-discord-link" href="@LeagueDetails.Discord" class="text-primary">here</a>.</p>
    }
</footer>

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    private string? SeasonId => LeagueDetails?.Seasons?.LastOrDefault()?.Id;

    private ViewModels.LeagueViewModel? LeagueDetails { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Js.InvokeVoidAsync("addTooltips");
    }

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId != null)
            LeagueDetails = await LeagueService.GetLeagueVm(LeagueId);
    }
}