@using TMApplication.Services
@using TMApplication.ViewModels
@using TMInfrastructure.Http
@using TMLeague.Components
@using TMLeague.Components.TmLinks
@inject DivisionService DivisionService
@inject GameService GameService

<h5>
    <a class="text-inherit" href="@RouteProvider.GetRoute(LeagueId, SeasonId, DivisionId)">
        @(DivisionVm?.DivisionName ?? "Division")
    </a>
</h5>

@if (DivisionVm == null)
{
    <Loading></Loading>
}
else
{
    @if (DivisionVm.WinnerPlayerName != null)
    {
        <div class="container">
            <span>Winner: </span>

            <PlayerLink PlayerName="@DivisionVm.WinnerPlayerName"></PlayerLink>
        </div>
    }
    else
    {
        <div class="progress mb-1">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-success"
         role="progressbar" aria-valuenow="@((int)DivisionVm.Games.Min(game => game.Progress))"
         aria-valuemin="0" aria-valuemax="100" style="@($"width: {(int)DivisionVm.Games.Min(game => game.Progress)}%")">
                @($"T{DivisionVm.Games.Where(game => !game.IsStalling && !game.IsFinished).Min(game => game.Turn)}")
            </div>
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning"
         role="progressbar" aria-valuenow="@((int)DivisionVm.Progress)"
         aria-valuemin="0" aria-valuemax="100" style="@($"width: {(int)(DivisionVm.Progress - DivisionVm.Games.Min(game => game.Progress))}%")">
                @($"{Math.Round(DivisionVm.Progress)}%")
            </div>
        </div>
    }
    <div class="container collapse @(ShowDetails ? "show" : "")">
        <div class="row">
            @foreach (var (game, i) in DivisionVm.Games.Select((model, i) => (model, i)))
            {
                <div class="col-2 col-sm-3 col-md-2 col-xl-1">
                    <GameLink Id="@game.Id" Name="@($"G{i + 1}")"></GameLink>
                </div>
                @if (game.WinnerPlayerName != null)
                {
                    <div class="col-4 col-sm-9 col-md-10 col-xl-5">
                        <div title="Winner" class="overflow-hidden text-nowrap">
                            <PlayerLink PlayerName="@game.WinnerPlayerName"></PlayerLink>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-4 col-sm-9 col-md-10 col-xl-5 py-1">
                        <div class="progress h-100" title="@(string.IsNullOrEmpty(game.Name) ? "Game unavailable" : $"Turn {game.Turn}")">
                            <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning"
                     role="progressbar" aria-valuenow="@((int)game.Progress)"
                     aria-valuemin="0" aria-valuemax="100" style="@($"width: {(int)game.Progress}%")">
                                @(game.IsStalling ? "Stalling" : $"T{game.Turn}")
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    <button class="btn btn-primary w-100 mb-1 @(ShowDetails || DivisionVm.WinnerPlayerName != null ? "rounded-0 rounded-bottom" : "")"
        @onclick="ChangeVisibility">
        @(ShowDetails ? "Hide" : "Show") game details
    </button>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? SeasonId { get; set; }

    [Parameter]
    public string? DivisionId { get; set; }

    private LeagueDivisionSummaryViewModel? DivisionVm { get; set; }

    private bool ShowDetails { get; set; } = false;

    private void ChangeVisibility() => ShowDetails = !ShowDetails;

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionSummaryVm(LeagueId, SeasonId, DivisionId);
    }
}