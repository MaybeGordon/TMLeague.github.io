@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}/configuration"
@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}/configuration/{Finished}"
@page "/league/{leagueId}/configuration"
@inject DivisionService DivisionService
@inject IJSRuntime JsRuntime

<h3>Division configuration</h3>

@if (DivisionConfigurationForm == null)
{
    <div class="row">
        @if (_isInitialized)
        {
            <div class="lead">That division not exists.</div>
        }
        else
        {
            <Loading></Loading>
        }
    </div>
}
else
{
    <EditForm Model="@DivisionConfigurationForm" OnInvalidSubmit="@ScrollToTop" OnValidSubmit="@HandleSubmit" class="text-start row mt-4">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="name" class="form-label text-start">Name</label>
            <div id="nameHelp" class="form-text">A name of the division</div>
            <InputText id="name" @bind-Value="DivisionConfigurationForm.Name" placeholder="Name" class="form-control" aria-describedby="nameHelp" />
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="judge" class="form-label text-start">Judge</label>
            <div id="judgeHelp" class="form-text">A judge of the division</div>
            <InputText id="judge" @bind-Value="DivisionConfigurationForm.Judge" placeholder="TM judge name" class="form-control" aria-describedby="judgeHelp" />
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="players" class="form-label text-start">Players</label>
            <div id="playersHelp" class="form-text">
                Please insert the <b>Thronemaster's names of players</b> from the <b>Division</b>.
            </div>
            @foreach (var formPlayer in DivisionConfigurationForm.Players)
            {
                var player = formPlayer;
                <div class="row mb-3">
                    <label class="col-2 col-md-1">@($"P{player.Idx}")</label>
                    <div class="@(DivisionConfigurationForm.CanModifyLists ? "col-9 col-md-10" : "col-10 col-md-11")">
                        <InputText id="@($"player-{player.Idx}")" @bind-Value="@player.Name" placeholder="TM player name" class="form-control" aria-describedby="playersHelp" />
                    </div>
                    @if (DivisionConfigurationForm.CanModifyLists)
                    {
                        <button type="button" class="col-1 p-0 btn btn-link" @onclick="() => RemovePlayer(player.Idx)"><i class="bi bi-x"></i></button>
                    }
                </div>
            }
            @if (DivisionConfigurationForm.CanModifyLists)
            {
                <div class="row mb-3">
                    <button type="button" class="btn btn-primary w-100" @onclick="() => AddPlayer()">Add player</button>
                </div>
            }
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="games" class="form-label text-start">Games</label>
            <div id="gamesHelp" class="form-text">
                Please insert the <b>Thronemaster's IDs of games</b> from the <b>Division</b>.
            </div>
            @foreach (var formGame in DivisionConfigurationForm.Games)
            {
                var game = formGame;
                <div class="row mb-3">
                    <label class="col-2 col-md-1">@($"G{game.Idx}")</label>
                    <div class="@(DivisionConfigurationForm.CanModifyLists ? "col-9 col-md-10" : "col-10 col-md-11")">
                        <InputNumber id="@($"game-{game.Idx}")" @bind-Value="@game.TmId" placeholder="TM game ID" class="form-control" aria-describedby="gamesHelp" />
                    </div>
                    @if (DivisionConfigurationForm.CanModifyLists)
                    {
                        <button type="button" class="col-1 p-0 btn btn-link" @onclick="() => RemoveGame(game.Idx)"><i class="bi bi-x"></i></button>
                    }
                </div>
            }
            @if (DivisionConfigurationForm.CanModifyLists)
            {
                <div class="row mb-3">
                    <button type="button" class="btn btn-primary w-100" @onclick="AddGame">Add game</button>
                </div>
            }
        </div>

        <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="penalties" class="form-label text-start">Penalties</label>
            <div id="penaltiesHelp" class="form-text">
                In first column choose penalized player, in the second a related game, then number of penalty points and finally short description about the penalty's reason.
            </div>
            <div class="row mb-3" style="min-width: 400px;">
                <label class="col-3" style="min-width: 100px;">Player</label>
                <label class="col-2" style="min-width: 66px;">Game</label>
                <label class="col-2" style="min-width: 66px;">Points</label>
                <label class="col-3" style="min-width: 100px;">Details</label>
                <label class="col-2" style="min-width: 66px;">Disqualified</label>
            </div>
            @foreach (var formPenalty in DivisionConfigurationForm.Penalties)
            {
                var penalty = formPenalty;
                <div class="row mb-3" style="min-width: 400px;">
                    <div class="col-3" style="min-width: 100px;">
                        <InputSelect id="@($"penalty-{penalty.Idx}-player")" @bind-Value="@penalty.Player" class="form-select" aria-describedby="penaltiesHelp">
                            <option value="">---</option>
                            @foreach (var player in DivisionConfigurationForm.Players)
                            {
                                <option value="@player.Name">@player.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-2" style="min-width: 66px;">
                        <InputSelect id="@($"penalty-{penalty.Idx}-game")" @bind-Value="@penalty.Game" class="form-select" aria-describedby="penaltiesHelp">
                            <option value="0">---</option>
                            @foreach (var game in DivisionConfigurationForm.GetPlayerGames(penalty.Player))
                            {
                                <option value="@game.TmId">@($"G{game.Idx}")</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-2" style="min-width: 66px;">
                        <InputNumber id="@($"penalty-{penalty.Idx}-points")" @bind-Value="@penalty.Points" placeholder="Points" class="form-control" aria-describedby="penaltiesHelp" />
                    </div>
                    <div class="col-3" style="min-width: 100px;">
                        <InputText id="@($"penalty-{penalty.Idx}-details")" @bind-Value="@penalty.Details" placeholder="Details" class="form-control" aria-describedby="penaltiesHelp" />
                    </div>
                    <div class="col-2" style="min-width: 66px;">
                        <InputCheckbox id="@($"penalty-{penalty.Idx}-dq")" @bind-Value="@penalty.Disqualification" class="form-check" aria-describedby="penaltiesHelp" />
                    </div>
                    <button type="button" class="col-2 p-0 btn btn-link" style="min-width: 33px;" @onclick="() => RemovePenalty(penalty.Idx)"><i class="bi bi-x"></i></button>
                </div>
            }
            <div class="row mb-3">
                <button type="button" class="btn btn-primary w-100" @onclick="AddPenalty">Add penalty</button>
            </div>
        </div>

        <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="replacements" class="form-label text-start">Replacements</label>
            <div id="replacementsHelp" class="form-text">
                If there are any replacements they should be added. "From" is an original player registered to the league, "To" is the TM name of the replacing player.
            </div>
            <div class="row mb-3" style="min-width: 300px;">
                <label class="col-4" style="min-width: 100px;">From</label>
                <label class="col-4" style="min-width: 100px;">To</label>
                <label class="col-3" style="min-width: 66px;">Game</label>
            </div>
            @foreach (var formReplacement in DivisionConfigurationForm.Replacements)
            {
                var replacement = formReplacement;
                <div class="row mb-3" style="min-width: 400px;">
                    <div class="col-4" style="min-width: 100px;">
                        <InputSelect id="@($"replacement-{replacement.Idx}-from")" @bind-Value="@replacement.From" class="form-select" aria-describedby="replacementsHelp">
                            <option value="">---</option>
                            @foreach (var player in DivisionConfigurationForm.Players)
                            {
                                <option value="@player.Name">@player.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-4" style="min-width: 100px;">
                        <InputText id="@($"replacement-{replacement.Idx}-to")" @bind-Value="@replacement.To" placeholder="TM player name" class="form-control" aria-describedby="replacementsHelp" />
                    </div>
                    <div class="col-3" style="min-width: 100px;">
                        <InputSelect id="@($"replacement-{replacement.Idx}-game")" @bind-Value="@replacement.Game" class="form-select" aria-describedby="replacementsHelp">
                            <option value="0">---</option>
                            @foreach (var game in DivisionConfigurationForm.GetPlayerGames(replacement.From))
                            {
                                <option value="@game.TmId">@($"G{game.Idx}")</option>
                            }
                        </InputSelect>
                    </div>
                    <button type="button" class="col-1 p-0 btn btn-link" style="min-width: 33px;" @onclick="() => RemoveReplacement(replacement.Idx)"><i class="bi bi-x"></i></button>
                </div>
            }
            <div class="row mb-3">
                <button type="button" class="btn btn-primary w-100" @onclick="AddReplacement">Add replacement</button>
            </div>
        </div>

        <div class="@(DivisionId == "d1" ? "col-sm-6" : "") p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="isFinished" class="form-label text-start">Finished</label>
            <div class="d-flex align-items-center">
                <InputCheckbox id="isFinished" @bind-Value="DivisionConfigurationForm.IsFinished" class="form-check-input me-2" aria-describedby="isFinishedHelp" />
                <div id="isFinishedHelp" class="form-text m-0">
                    Uncheck if division is not finished yet
                </div>
            </div>
        </div>

        @if (DivisionId == "d1")
        {
            <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="winnerTitle" class="form-label text-start">Winner title</label>
                <div id="winnerTitleHelp" class="form-text">A winner title</div>
                <InputText id="winnerTitle" @bind-Value="DivisionConfigurationForm.WinnerTitle" placeholder="The King" class="form-control" aria-describedby="winnerTitleHelp" />
            </div>
        }

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="promotions" class="form-label text-start">Promotions</label>
            <div id="promotionsHelp" class="form-text">A number of promoted players to the higher division</div>
            <InputNumber id="promotions" @bind-Value="DivisionConfigurationForm.Promotions" placeholder="0" class="form-control" aria-describedby="promotionsHelp" />
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="relegations" class="form-label text-start">Relegations</label>
            <div id="relegationsHelp" class="form-text">A number of relegated players to the lower division</div>
            <InputNumber id="relegations" @bind-Value="DivisionConfigurationForm.Relegations" placeholder="0" class="form-control" aria-describedby="relegationsHelp" />
        </div>

        <div class="alert alert-warning p-1 mb-1 text-center" role="alert">
            Please remember to finish the process on GitHub:
            <ol class="mx-auto mb-0" style="width: fit-content;">
                <li>content is copied to your clipboard,</li>
                <li>paste copied text to the json file,</li>
                @if (IsNew)
                {
                    <li>
                        set proper file path (use "/") and<br/>
                        name with ".json" extension,
                    </li>
                }
                <li>commit your changes,</li>
                <li>make a pull request and</li>
                @if (IsNew)
                {
                    <li>notify any reviewer about your changes.</li>
                }
                else
                {
                    <li>merge it to master.</li>
                }
            </ol>
            @if (IsNew)
            {
                <p class="m-0">
                    Detailed instructions are available in <a href="https://github.com/TMLeague/TMLeague.github.io/blob/master/docs/judge-season-new.md" target="_blank"><i>A guide for league judges at the start of a new season</i> on GitHub.</a>
                </p>
            }
            else
            {
                <p class="m-0">
                    Detailed instructions are available in <a href="https://github.com/TMLeague/TMLeague.github.io/blob/master/docs/judge-season-end.md#commit-your-changes-and-create-a-pull-request" target="_blank">the <i>Commit your changes and create a pull request</i> section on GitHub.</a><br />
                    You don't have to wait for the review before merging division json configuration file to master.
                </p>
            }
            If you have any problems, you can contact Imrihil via Discord, an <a href="mailto:imrihil@gmail.com">e-mail</a> or on a <a href="https://www.thronemaster.net/?goto=account&sub=private_messages&type=new&to=Imrihil" target="_blank">thronemaster.net</a>.
        </div>

        <div class="col-12 my-4">
            <button type="submit" class="btn btn-primary w-100">Update division configuration file</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }
    [Parameter]
    public string? SeasonId { get; set; }
    [Parameter]
    public string? DivisionId { get; set; }
    [Parameter]
    public string? Finished { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "season")]
    public string? SeasonQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "division")]
    public string? DivisionQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "judge")]
    public string? JudgeQuery { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "player")]
    public string[] PlayersQuery { get; set; } = Array.Empty<string>();

    private bool IsFinished => string.Equals(Finished, "Finished", StringComparison.InvariantCultureIgnoreCase);
    private bool IsNew => string.IsNullOrWhiteSpace(SeasonId) || string.IsNullOrWhiteSpace(DivisionId);

    private DivisionConfigurationForm? DivisionConfigurationForm { get; set; }

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId != null)
            DivisionConfigurationForm = await DivisionService.GetDivisionConfigurationForm(LeagueId, SeasonId, DivisionId, IsFinished);

        if (DivisionConfigurationForm != null)
        {
            if (string.IsNullOrWhiteSpace(DivisionConfigurationForm.Name) && !string.IsNullOrWhiteSpace(DivisionQuery))
                DivisionConfigurationForm.Name = GetDivisionName(DivisionQuery);

            if (string.IsNullOrWhiteSpace(DivisionConfigurationForm.Judge) && !string.IsNullOrWhiteSpace(JudgeQuery))
                DivisionConfigurationForm.Judge = JudgeQuery;

            foreach (var playerQuery in PlayersQuery)
                if (DivisionConfigurationForm.Players.All(player => player.Name != playerQuery))
                    AddPlayer(playerQuery);
        }

        _isInitialized = true;
    }

    static readonly JsonSerializerOptions JsonSerializerOptions = new()
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
        };

    private async Task ScrollToTop(EditContext context) =>
        await JsRuntime.InvokeVoidAsync("scrollToTop");

    private async Task HandleSubmit(EditContext context)
    {
        if (DivisionConfigurationForm == null)
            return;

        var division = new TMModels.Division(
            DivisionConfigurationForm.Name!,
            DivisionConfigurationForm.Judge,
            DivisionConfigurationForm.Players.Select(player => player.Name).ToArray(),
            DivisionConfigurationForm.Games.Select(game => game.TmId).ToArray(),
            DivisionConfigurationForm.Penalties
                .Where(penalty => !string.IsNullOrWhiteSpace(penalty.Player))
                .Select(penalty => new Penalty(penalty.Player!, penalty.Game, penalty.Points, penalty.Details ?? string.Empty, penalty.Disqualification)).ToArray(),
            DivisionConfigurationForm.Replacements
                .Where(replacement => !string.IsNullOrWhiteSpace(replacement.From) && !string.IsNullOrWhiteSpace(replacement.To) && replacement.Game != null)
                .Select(replacement => new Replacement(replacement.From!, replacement.To!, replacement.Game!.Value)).ToArray(),
            DivisionConfigurationForm.IsFinished,
            DivisionConfigurationForm.WinnerTitle,
            DivisionConfigurationForm.Promotions,
            DivisionConfigurationForm.Relegations);
        var data = JsonSerializer.Serialize(division, JsonSerializerOptions);
        await JsRuntime.InvokeVoidAsync("copyClipboard", data);
        await JsRuntime.InvokeVoidAsync("openInNewTab", RouteProvider.GetGithubDivision(LeagueId, SeasonId, DivisionId));
    }

    private void AddPlayer(string name = "")
    {
        if (DivisionConfigurationForm == null) return;
        DivisionConfigurationForm.Players.Add(new DivisionConfigurationFormPlayer(
            DivisionConfigurationForm.Players.Count + 1, new List<DivisionConfigurationFormGame>(), name));
        if (DivisionConfigurationForm.Games.Count < DivisionConfigurationForm.Players.Count)
            DivisionConfigurationForm.Games.Add(new DivisionConfigurationFormGame(DivisionConfigurationForm.Games.Count + 1));
    }

    private void AddGame() => DivisionConfigurationForm?.Games.Add(
        new DivisionConfigurationFormGame(DivisionConfigurationForm.Games.Count + 1));

    private void AddPenalty() => DivisionConfigurationForm?.Penalties.Add(new DivisionConfigurationFormPenalty(
        DivisionConfigurationForm.Penalties.Count + 1, DivisionConfigurationForm.Penalties.LastOrDefault()?.Player));

    private void AddReplacement() => DivisionConfigurationForm?.Replacements.Add(new DivisionConfigurationFormReplacement(
        DivisionConfigurationForm.Replacements.Count + 1, DivisionConfigurationForm.Replacements.LastOrDefault()?.From));

    private void RemovePlayer(int idx) =>
        Remove(DivisionConfigurationForm?.Players, idx, (player, newIdx) => player.Idx = newIdx);

    private void RemoveGame(int idx) =>
        Remove(DivisionConfigurationForm?.Games, idx, (game, newIdx) => game.Idx = newIdx);

    private void RemovePenalty(int idx) =>
        Remove(DivisionConfigurationForm?.Penalties, idx, (penalty, newIdx) => penalty.Idx = newIdx);

    private void RemoveReplacement(int idx) =>
        Remove(DivisionConfigurationForm?.Replacements, idx, (replacement, newIdx) => replacement.Idx = newIdx);

    private static void Remove<T>(IList<T>? list, int idx, Action<T, int> updateIndex)
    {
        if (list == null) return;

        list.RemoveAt(idx - 1);

        foreach (var (item, i) in list.Select((item, i) => (item, i)))
            updateIndex(item, i + 1);
    }

    private static string GetDivisionName(string divisionNumber)
    {
        if (divisionNumber.Equals("q", StringComparison.InvariantCultureIgnoreCase))
            return "Qualifiers";

        return divisionNumber.StartsWith("q", StringComparison.InvariantCultureIgnoreCase)
            ? $"Qualifiers {divisionNumber[1..]}"
            : $"Division {divisionNumber}";
    }
}
