@page "/league/{leagueId}/player/{playerName}"
@page "/player/{playerName}"
@inject PlayerService PlayerService
<h3>
    <PlayerLink PlayerName="@PlayerName"></PlayerLink>
</h3>

<div class="row">
    @if (PlayerVm == null)
    {
        @if (_isInitialized)
        {
            @if (string.IsNullOrEmpty(PlayerName))
            {
                <div class="lead">Player name @PlayerName is not valid.</div>
            }
            else
            {
                <div class="lead">Player @PlayerName not exists for league @LeagueId.</div>
            }
        }
        else
        {
            <Loading></Loading>
        }
    }
    else
    {
        @if (LeagueId == null || PlayerLeagueVm == null)
        {
            @foreach (var playerLeagueVm in PlayerVm.Leagues)
            {
                <h4>
                    <a href="@RouteProvider.GetLeagueIndexRoute(playerLeagueVm.LeagueId)" class="text-inherit">@playerLeagueVm.LeagueName</a>
                </h4>

                <LeaguePlayer LeagueId="@LeagueId" PlayerVm="@playerLeagueVm"></LeaguePlayer>
            }
        }
        else
        {
            <h4>
                <a href="@RouteProvider.GetLeagueIndexRoute(LeagueId)" class="text-inherit">@PlayerLeagueVm.LeagueName</a>
            </h4>

            <LeaguePlayer LeagueId="@LeagueId" PlayerVm="@PlayerLeagueVm"></LeaguePlayer>

            <NavLink class="btn btn-primary w-100 mb-3" href=@RouteProvider.GetPlayerRoute(PlayerVm.Name)>Show all leagues</NavLink>
        }
    }
</div>

<footer class="text-white-50 d-block">
    @if (PlayerVm?.GeneratedTime != null)
    {
        <p class="mb-0">Data fetched at @PlayerVm.GeneratedTime.LocalDateTime.ToString("yyyy-MM-dd hh:mm tt")</p>
    }
    <p><small><i>* Calculated statistical data like killed and lost units can be approximate. It's impossible to correctly calculate situations like loosing ship by the attacker by leaving an area with port empty or using Mace Tyrell in some cases from logs.</i></small></p>
</footer>

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? PlayerName { get; set; }

    private PlayerViewModel? PlayerVm { get; set; }
    
    private PlayerLeagueViewModel? PlayerLeagueVm => LeagueId == null ? 
        null :
        PlayerVm?.Leagues.FirstOrDefault(league => league.LeagueId == LeagueId);

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PlayerName))
            PlayerVm = await PlayerService.GetPlayerVm(PlayerName);

        _isInitialized = true;
    }
}