@page "/league/{leagueId}/summary"
@page "/league/{leagueId}/summary/{type}"
@page "/league/{leagueId}/summary/{type}/{divisionId}"
@using TMApplication.Providers
@using TMApplication.Services
@using TMApplication.ViewModels
@using TMLeague.Components
@using TMLeague.Components.Stats
@using TMLeague.Components.TmLinks
@inject SummaryService SummaryService
@inject ILogger<Summary> Logger
<h3>@(SummaryVm?.LeagueName ?? "League")</h3>
<h4>Summary</h4>

<div class="d-flex flex-column">
    @if (LeagueId != null)
    {
        <div class="d-flex flex-row my-1">
            <div class="btn-group">
                <a class="btn btn-primary @(DivisionId == null ? "active" : "")" href="@RouteProvider.GetLeagueSummaryRoute(LeagueId, null, ScoreType)" disabled=@(DivisionId == null)>
                    Total
                </a>
                @if (SummaryVm != null)
                {
                    @foreach (var division in SummaryVm.AvailableDivisions)
                    {
                        <a class="btn btn-primary @(DivisionId == division.Id ? "active" : "")" href="@RouteProvider.GetLeagueSummaryRoute(LeagueId, @division.Id, ScoreType)" disabled=@(DivisionId == division.Id)>
                            @division.Name
                        </a>
                    }
                }
            </div>
        </div>
        <div class="d-flex flex-row my-1">
            <div class="btn-group">
                @foreach (var type in ScoreTypes.All)
                {
                    <a class="btn btn-primary @(ScoreType == type ? "active" : "")" href="@RouteProvider.GetLeagueSummaryRoute(LeagueId, DivisionId, type)" disabled=@(ScoreType == type)>
                        @type
                    </a>
                }
            </div>
        </div>
    }
    <div class="row">
        @if (SummaryVm == null)
        {
            @if (_isInitialized)
            {
                <div class="lead">The league has no finished seasons.</div>
            }
            else
            {
                <Loading></Loading>
            }
        }
        else
        {
            <table class="table table-striped table-dark pb-0" width="1700px">
                <thead>
                    <tr>
                        <th scope="col" style="width: 200px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Player)">
                                Player <SortedColumnCaret Column="@SummaryColumn.Player" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Points)">
                                Points <SortedColumnCaret Column="@SummaryColumn.Points" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Wins)">
                                Wins <SortedColumnCaret Column="@SummaryColumn.Wins" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Penalties)">
                                Penalties <SortedColumnCaret Column="@SummaryColumn.Penalties" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Cla)">
                                Cla <SortedColumnCaret Column="@SummaryColumn.Cla" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Supply)">
                                Supply <SortedColumnCaret Column="@SummaryColumn.Supply" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.PT)">
                                PT <SortedColumnCaret Column="@SummaryColumn.PT" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Baratheon)">
                                Baratheon <SortedColumnCaret Column="@SummaryColumn.Baratheon" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Lannister)">
                                Lannister <SortedColumnCaret Column="@SummaryColumn.Lannister" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Stark)">
                                Stark <SortedColumnCaret Column="@SummaryColumn.Stark" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Tyrell)">
                                Tyrell <SortedColumnCaret Column="@SummaryColumn.Tyrell" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Greyjoy)">
                                Greyjoy <SortedColumnCaret Column="@SummaryColumn.Greyjoy" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Martell)">
                                Martell <SortedColumnCaret Column="@SummaryColumn.Martell" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        @if (ScoreType != ScoreType.Total)
                        {
                            <th scope="col" style="width: 100px">
                                <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Position)">
                                    Position <SortedColumnCaret Column="@SummaryColumn.Position" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                                </button>
                            </th>
                            <th scope="col" style="width: 100px">
                                <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.MPM)">
                                    MPM <SortedColumnCaret Column="@SummaryColumn.MPM" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                                </button>
                            </th>
                        }
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Battles)">
                                Battles <SortedColumnCaret Column="@SummaryColumn.Battles" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Kills)">
                                Kills <SortedColumnCaret Column="@SummaryColumn.Kills" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.Casualties)">
                                Casualties <SortedColumnCaret Column="@SummaryColumn.Casualties" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.PowerTokensGathered)">
                                PT+ <SortedColumnCaret Column="@SummaryColumn.PowerTokensGathered" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.PowerTokensSpent)">
                                PT- <SortedColumnCaret Column="@SummaryColumn.PowerTokensSpent" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                        <th scope="col" style="width: 100px">
                            <button class="btn-link w-100 h-100" @onclick="() => SortByColumn(SummaryColumn.AllSeasons)">
                                All seasons <SortedColumnCaret Column="@SummaryColumn.AllSeasons" SortedColumn="@_sortColumn" IsAscending="@_sortAscending"></SortedColumnCaret>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in SummaryVm.Players.Sort(_sortColumn, _sortAscending, ScoreType))
                    {
                        <tr>
                            <th scope="row"><PlayerLink PlayerName="@player.Player"></PlayerLink></th>
                            <td class="text-warning">@player.TotalPoints(ScoreType)</td>
                            <td>@player.Wins(ScoreType)</td>
                            <td>@player.PenaltiesPoints(ScoreType)</td>
                            <td>@player.Cla(ScoreType)</td>
                            <td>@player.Supplies(ScoreType)</td>
                            <td>@player.PowerTokens(ScoreType)</td>
                            <td>@player.Baratheon(ScoreType)</td>
                            <td>@player.Lannister(ScoreType)</td>
                            <td>@player.Stark(ScoreType)</td>
                            <td>@player.Tyrell(ScoreType)</td>
                            <td>@player.Greyjoy(ScoreType)</td>
                            <td>@player.Martell(ScoreType)</td>
                            @if (ScoreType != ScoreType.Total)
                            {
                                <td>@player.Position(ScoreType)</td>
                                <td>@player.MinutesPerMove(ScoreType)</td>
                            }
                            <td class="tt" ontouchstart=""><BattleStats Stats="@player.Battles(ScoreType)"></BattleStats></td>
                            <td class="tt" ontouchstart=""><UnitStats Stats="@player.Kills(ScoreType)"></UnitStats></td>
                            <td class="tt" ontouchstart=""><UnitStats Stats="@player.Casualties(ScoreType)"></UnitStats></td>
                            <td class="tt" ontouchstart=""><PowerTokenStats Stats="@player.PowerTokensGathered(ScoreType)"></PowerTokenStats></td>
                            <td class="tt" ontouchstart=""><BidStats Stats="@player.PowerTokensSpent(ScoreType)"></BidStats></td>
                            <td>@player.Seasons</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    [Parameter]
    public string? DivisionId { get; set; }

    [Parameter]
    public string? Type { get; set; }

    private ScoreType ScoreType => Enum.TryParse<ScoreType>(Type ?? "", out var scoreType) ? scoreType : ScoreType.Best;

    private SummaryViewModel? SummaryVm { get; set; }

    private bool _isInitialized;
    private SummaryColumn _sortColumn;
    private bool _sortAscending;

    protected override async Task OnParametersSetAsync()
    {
        if (LeagueId != null)
            SummaryVm = await SummaryService.GetSummaryVm(LeagueId, DivisionId);

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId != null)
            SummaryVm = await SummaryService.GetSummaryVm(LeagueId, DivisionId);
        else
            Logger.LogError($"Parameter {nameof(LeagueId)} is required!");

        _isInitialized = true;
    }

    private void SortByColumn(SummaryColumn column)
    {
        if (_sortColumn == column)
        {
            _sortAscending = !_sortAscending;
            return;
        }
        _sortColumn = column;
        _sortAscending = column.GetSortAscendingDefault();
    }
}