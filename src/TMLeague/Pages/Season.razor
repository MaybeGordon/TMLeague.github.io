@page "/league/{leagueId}/season/{seasonId}"
@inject SeasonService SeasonService
@inject ILogger<Season> Logger

<h3>League @LeagueId</h3>
<h4>
    @if (SeasonVm?.SeasonNavigation.Previous == null)
    {
        <i class="bi bi-chevron-left invisible"></i>
    }
    @if (LeagueId != null && SeasonVm?.SeasonNavigation.First != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueSeasonRoute(LeagueId, SeasonVm.SeasonNavigation.First)"><i class="bi bi-chevron-double-left"></i></a>
    }
    else
    {
        <i class="bi bi-chevron-double-left invisible"></i>
    }
    @if (LeagueId != null && SeasonVm?.SeasonNavigation.Previous != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueSeasonRoute(LeagueId, SeasonVm.SeasonNavigation.Previous)"><i class="bi bi-chevron-left"></i></a>
    }
    <span>@(SeasonVm?.Name ?? "Season")</span>
    @if (LeagueId != null && SeasonVm?.SeasonNavigation.Next != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueSeasonRoute(LeagueId, SeasonVm.SeasonNavigation.Next)"><i class="bi bi-chevron-right"></i></a>
    }
    @if (LeagueId != null && SeasonVm?.SeasonNavigation.Last != null)
    {
        <a class="text-inherit" href="@RouteProvider.GetLeagueSeasonRoute(LeagueId, SeasonVm.SeasonNavigation.Last)"><i class="bi bi-chevron-double-right"></i></a>
    }
    else
    {
        <i class="bi bi-chevron-double-right invisible"></i>
    }
    @if (SeasonVm?.SeasonNavigation.Next == null)
    {
        <i class="bi bi-chevron-right invisible"></i>
    }
</h4>

@if (SeasonVm == null)
{
    @if (_isInitialized)
    {
        <div class="lead">The season has no divisions.</div>
    }
    else
    {
        <Loading></Loading>
    }
}
else
{
    <div class="container row p-2 bg-dark-container">
        @foreach (var division in SeasonVm.Divisions)
        {
            <div class="col-md-4 col-sm-6 bg-dark-container-2">
                <a class="text-inherit" href="@RouteProvider.GetRoute(LeagueId, SeasonId, division.Id)">
                    <h5>
                        @division.Name
                    </h5>
                </a>
                <table class="table table-striped table-dark pb-0" width="300px">
                    <thead>
                        <tr>
                            <th scope="col" style="width: 200px">Player</th>
                            <th scope="col" style="width: 100px">Points</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (playerVm, i) in division.Players.Select((playerVm, i) => (playerVm, i)))
                        {
                            <tr>
                                <th scope="row" class="@GetPlayerClass(playerVm, i)">@playerVm.Name</th>
                                <td class="text-warning">@playerVm.Points</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }
    [Parameter]
    public string? SeasonId { get; set; }

    private SeasonViewModel? SeasonVm { get; set; }

    private bool _isInitialized;

    protected override async Task OnParametersSetAsync()
    {
        if (LeagueId != null && SeasonId != null)
            SeasonVm = await SeasonService.GetSeasonVm(LeagueId, SeasonId);
        else
            Logger.LogError($"Parameters {nameof(LeagueId)} and {nameof(SeasonId)} are required!");

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId != null && SeasonId != null)
            SeasonVm = await SeasonService.GetSeasonVm(LeagueId, SeasonId);
        else
            Logger.LogError($"Parameters {nameof(LeagueId)} and {nameof(SeasonId)} are required!");

        _isInitialized = true;
    }

    private string GetPlayerClass(SeasonPlayerViewModel playerVm, int i)
    {
        if (playerVm.IsPromoted) return "promoted";
        if (playerVm.IsRelegated) return "relegated";
        if (i == 0) return "winner";

        return string.Empty;
    }
}