@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}/penalties"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject DivisionService DivisionService
@inject IJSRuntime JsRuntime

<h3>Penalties</h3>

@if (DivisionVm == null || PenaltiesForm == null)
{
    <div class="row">
        @if (_isInitialized)
        {
            <div class="lead">That division not exists.</div>
        }
        else
        {
            <Loading></Loading>
        }
    </div>
}
else
{
    <EditForm Model="@PenaltiesForm" OnSubmit="@HandleSubmit" class="text-start row mt-4">

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="name" class="form-label text-start">Name</label>
            <div id="nameHelp" class="form-text">A name of the division</div>
            <InputText id="name" @bind-Value="PenaltiesForm.Name" placeholder="Name" class="form-control" aria-describedby="nameHelp" />
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="judge" class="form-label text-start">Judge</label>
            <div id="judgeHelp" class="form-text">A judge of the division</div>
            <InputText id="judge" @bind-Value="PenaltiesForm.Judge" placeholder="TM judge name" class="form-control" aria-describedby="judgeHelp" />
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="players" class="form-label text-start">Players</label>
            <div id="playersHelp" class="form-text">
                Please insert the <b>Thronemaster's names of players</b> from the <b>Division</b>.
            </div>
            @foreach (var formPlayer in PenaltiesForm.Players)
            {
                var player = formPlayer;
                <div class="row mb-3">
                    <label class="col-2 col-md-1">@($"P{player.Idx}")</label>
                    <div class="col-10 col-md-11">
                        <InputText id="@($"player-{player.Idx}")" @bind-Value="@player.Name" placeholder="TM player name" class="form-control" aria-describedby="playersHelp" />
                    </div>
                </div>
            }
            <div class="row mb-3">
                <button type="button" class="btn btn-primary w-100" @onclick="AddPlayer">Add player</button>
            </div>
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="games" class="form-label text-start">Games</label>
            <div id="gamesHelp" class="form-text">
                Please insert the <b>Thronemaster's IDs of games</b> from the <b>Division</b>.
            </div>
            @foreach (var formGame in PenaltiesForm.Games)
            {
                var game = formGame;
                <div class="row mb-3">
                    <label class="col-2 col-md-1">@($"G{game.Idx}")</label>
                    <div class="col-10 col-md-11">
                        <InputNumber id="@($"game-{game.Idx}")" @bind-Value="@game.TmId" placeholder="TM game ID" class="form-control" aria-describedby="gamesHelp" />
                    </div>
                </div>
            }
            <div class="row mb-3">
                <button type="button" class="btn btn-primary w-100" @onclick="AddGame">Add game</button>
            </div>
        </div>

        <h4>Penalties</h4>

        <h4>Replacements</h4>

        <div class="@(DivisionId == "d1" ? "col-sm-6" : "") p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="isFinished" class="form-label text-start">Finished</label>
            <div class="d-flex align-items-center">
                <InputCheckbox id="isFinished" @bind-Value="PenaltiesForm.IsFinished" class="form-check-input me-2" aria-describedby="isFinishedHelp" />
                <div id="isFinishedHelp" class="form-text m-0">
                    Uncheck if division is not finished yet
                </div>
            </div>
        </div>

        @if (DivisionId == "d1")
        {
            <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
                <label for="winnerTitle" class="form-label text-start">Winner title</label>
                <div id="winnerTitleHelp" class="form-text">A winner title</div>
                <InputText id="winnerTitle" @bind-Value="PenaltiesForm.WinnerTitle" placeholder="The King" class="form-control" aria-describedby="winnerTitleHelp" />
            </div>
        }

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="promotions" class="form-label text-start">Promotions</label>
            <div id="promotionsHelp" class="form-text">A number of promoted players to the higher division</div>
            <InputNumber id="promotions" @bind-Value="PenaltiesForm.Promotions" placeholder="0" class="form-control" aria-describedby="promotionsHelp" />
        </div>

        <div class="col-sm-6 p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="relegations" class="form-label text-start">Relegations</label>
            <div id="relegationsHelp" class="form-text">A number of relegated players to the lower division</div>
            <InputNumber id="relegations" @bind-Value="PenaltiesForm.Relegations" placeholder="0" class="form-control" aria-describedby="relegationsHelp" />
        </div>

        <div class="alert alert-warning p-1 mb-1 text-center" role="alert">
            Please remember to:
            <ol class="mx-auto mb-0" style="width: fit-content;">
                <li>commit your changes,</li>
                <li>make a pull request and</li>
                <li>merge to master.</li>
            </ol>
            If you have any problems, you can contact Imrihil on Discord.
        </div>

        <div class="col-12 my-4">
            <button type="submit" class="btn btn-primary w-100">Update division configuration file</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }
    [Parameter]
    public string? SeasonId { get; set; }
    [Parameter]
    public string? DivisionId { get; set; }

    private DivisionViewModel? DivisionVm { get; set; }

    private PenaltiesForm? PenaltiesForm { get; set; }

    private bool _isInitialized;

    protected override async Task OnParametersSetAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId); // TODO: GetPenaltiesForm
        SetPenaltiesForm();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId);
        SetPenaltiesForm();
        _isInitialized = true;
    }

    private void SetPenaltiesForm()
    {
        if (DivisionVm == null || PenaltiesForm != null)
            return;

        PenaltiesForm = new PenaltiesForm(
            DivisionVm.DivisionName,
            DivisionVm.Judge,
            DivisionVm.Players.Select((player, i) => new PenaltyFormPlayer(i + 1) { Name = player.Name }).ToList(),
            DivisionVm.Games.Select((game, i) => new PenaltyFormGame(i + 1) { TmId = game?.Id }).ToList(),
            DivisionVm.Players
                .SelectMany(player => player.Penalties
                    .Where(penalty => penalty.Details != Penalty.BattlePenalty)
                    .Select(penalty => new PenaltyForm(
                        player.Name,
                        penalty.Game,
                        penalty.Points,
                        penalty.Details))).ToList(),
            DivisionVm.Replacements?.Select(replacement => new ReplacementForm(
                replacement.From,
                replacement.To,
                replacement.Game)).ToList() ?? new List<ReplacementForm>(),
            true,
            DivisionVm.WinnerTitle,
            DivisionVm.Promotions,
            DivisionVm.Relegations);
    }

    static readonly JsonSerializerOptions JsonSerializerOptions = new()
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
        };

    private async Task HandleSubmit(EditContext context)
    {
        if (PenaltiesForm == null)
            return;

        var division = new TMModels.Division(
            PenaltiesForm.Name,
            PenaltiesForm.Judge,
            PenaltiesForm.Players.Select(player => player.Name).ToArray(),
            PenaltiesForm.Games.Select(game => game.TmId).ToArray(),
            PenaltiesForm.Penalties.Select(penalty => new Penalty(penalty.Player, penalty.Game, penalty.Points, penalty.Details)).ToArray(),
            PenaltiesForm.Replacements.Select(replacement => new Replacement(replacement.From, replacement.To, replacement.Game)).ToArray(),
            PenaltiesForm.IsFinished,
            PenaltiesForm.WinnerTitle,
            PenaltiesForm.Promotions,
            PenaltiesForm.Relegations);
        var data = JsonSerializer.Serialize(division, JsonSerializerOptions);
        await JsRuntime.InvokeVoidAsync("copyClipboard", data);

        await JsRuntime.InvokeVoidAsync("openInNewTab", RouteProvider.GetGithubDivision(LeagueId, SeasonId, DivisionId));
    }

    private void AddPlayer() => PenaltiesForm?.Players.Add(new PenaltyFormPlayer(PenaltiesForm.Players.Count + 1));

    private void AddGame() => PenaltiesForm?.Games.Add(new PenaltyFormGame(PenaltiesForm.Games.Count + 1));
}
