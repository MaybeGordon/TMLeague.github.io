@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}/penalties"
@inject DivisionService DivisionService

<h3>Penalties</h3>

@if (DivisionVm == null)
{
    <div class="row">
        @if (_isInitialized)
        {
            <div class="lead">That division not exists.</div>
        }
        else
        {
            <Loading></Loading>
        }
    </div>
}
else
{
    <EditForm Model="@PenaltiesForm" OnSubmit="@HandleSubmit" class="text-start row mt-4">

        <div class="p-3 mb-3 bg-dark-container rounded-5 d-flex flex-column">
            <label for="name" class="form-label text-start">Name</label>
            <div id="nameHelp" class="form-text">A name of the division</div>
            <InputText id="name" @bind-Value="PenaltiesForm.Name" placeholder="Division" class="form-control" aria-describedby="nameHelp" />
        </div>

        <h4>Penalties</h4>

        <h4>Replacements</h4>

        <div class="col-12 my-4">
            <button type="submit" class="btn btn-primary w-100">Copy division configuration file</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }
    [Parameter]
    public string? SeasonId { get; set; }
    [Parameter]
    public string? DivisionId { get; set; }

    private DivisionViewModel? DivisionVm { get; set; }

    private PenaltiesForm? PenaltiesForm { get; set; }

    private bool _isInitialized;

    protected override async Task OnParametersSetAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId);
        SetPenaltiesForm();

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId);
        SetPenaltiesForm();
        _isInitialized = true;
    }

    private void SetPenaltiesForm()
    {
        if (DivisionVm == null || PenaltiesForm != null) 
            return;

        PenaltiesForm = new PenaltiesForm(
            DivisionVm.DivisionName,
            DivisionVm.Judge,
            DivisionVm.Players.Select(player => player.Name).ToList(),
            DivisionVm.Games.Select(game => (int?)game.Id).ToList(),
            DivisionVm.Players
                .SelectMany(player => player.Penalties
                    .Select(penalty => new PenaltyForm(
                        player.Name,
                        penalty.Game,
                        penalty.Points,
                        penalty.Details))).ToList(),
            DivisionVm.Replacements?.Select(replacement => new ReplacementForm(
                replacement.From,
                replacement.To,
                replacement.Game)).ToList() ?? new List<ReplacementForm>(),
            DivisionVm.IsFinished,
            DivisionVm.WinnerTitle,
            DivisionVm.Promotions,
            DivisionVm.Relegations);
    }

    private async Task HandleSubmit(EditContext context)
    {
        // TODO
    }
}
