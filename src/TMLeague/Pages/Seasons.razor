@page "/League/{leagueId}/seasons"
@using TMApplication.ViewModels
@using TMApplication.Services
@using TMLeague.Components.TmLinks
@inject LeagueService LeagueService
@inject ILogger<Seasons> Logger

<h3>@(LeagueChampions?.LeagueName ?? "League")</h3>
<h4>Seasons</h4>

@if (LeagueChampions == null)
{
    @if (_isInitialized)
    {
        <div class="lead">The league has no finished seasons.</div>
    }
    else
    {
        <Loading Size="10vh"></Loading>
    }
}
else
{
    <div class="container">
        @foreach (var season in LeagueChampions.Seasons)
        {
            <div class="row bg-dark-container">
                <h5>
                    <a class="text-white" href="@RouteProvider.GetRoute(LeagueId, season.SeasonId)">
                        @season.SeasonName
                    </a>
                </h5>
                @foreach (var division in season.Divisions)
                {
@*                    <div class="col-4 bg-dark-container-2">
                        <h6 class="mt-2">
                            <a class="text-white" href="@RouteProvider.GetRoute(LeagueId, season.SeasonId, division.DivisionId)">
                                @division.DivisionName
                            </a>
                        </h6>
                        <span class="ms-3 fst-italic">
                            <PlayerLink PlayerName="@division.PlayerName"></PlayerLink>
                            @(string.IsNullOrWhiteSpace(@division.Title) ? "" : $", {division.Title}")
                        </span>
                    </div>*@
                    <div class="col-4 p-2">
                        <a class="btn btn-primary w-100" href="@RouteProvider.GetRoute(LeagueId, season.SeasonId, division.DivisionId)">
                            <h6 class="mb-0">
                                @division.DivisionName
                            </h6>
                            <span class="ms-3 fst-italic">
                                @(string.IsNullOrWhiteSpace(@division.Title) ? 
                                    division.PlayerName : 
                                    $"{division.PlayerName}, {division.Title}")
                            </span>
                        </a>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string? LeagueId { get; set; }

    private LeagueSeasonsViewModel? LeagueChampions { get; set; }

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId != null)
            LeagueChampions = await LeagueService.GetLeagueSeasonsVm(LeagueId);
        else
            Logger.LogError($"Parameter {nameof(LeagueId)} is required!");

        _isInitialized = true;
    }
}