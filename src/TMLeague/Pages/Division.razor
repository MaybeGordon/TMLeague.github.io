@page "/league/{leagueId}/season/{seasonId}/division/{divisionId}"
@using TMApplication.ViewModels
@using TMApplication.Services
@using TMLeague.Components
@using TMLeague.Components.Division
@using TMLeague.Components.TmLinks
@using TMModels
@inject DivisionService DivisionService

<h3>@(DivisionVm?.LeagueName ?? $"League {LeagueId}")</h3>
<h4>@(DivisionVm?.SeasonName ?? $"Season {SeasonId}")</h4>
<h5>@(DivisionVm?.DivisionName ?? $"Division {DivisionId}")</h5>

<div class="row">
    @if (DivisionVm == null)
    {
        @if (_isInitialized)
        {
            <div class="lead">That division not exists.</div>
        }
        else
        {
            <Loading></Loading>
        }
    }
    else
    {
        <div class="col-lg-11">
            <table class="table table-striped table-dark pb-0" width="@(940 + DivisionVm.Tiebreakers.Length * 100)px">
                <thead>
                    <tr>
                        <th scope="col" style="width: 200px">Player</th>
                        <th scope="col" style="width: 100px">Points</th>
                        @foreach (var tiebreaker in DivisionVm.Tiebreakers)
                        {
                            <th scope="col" style="width: 100px">@tiebreaker.Name()</th>
                        }
                        <th scope="col" style="width: 0" class="p-1 invisible border-0 collapse @(ShowHouses ? "show" : "")"></th>
                        <th scope="col" style="width: 100px" class="collapse @(ShowHouses ? "show" : "")">Baratheon</th>
                        <th scope="col" style="width: 100px" class="collapse @(ShowHouses ? "show" : "")">Lannister</th>
                        <th scope="col" style="width: 100px" class="collapse @(ShowHouses ? "show" : "")">Stark</th>
                        <th scope="col" style="width: 100px" class="collapse @(ShowHouses ? "show" : "")">Tyrell</th>
                        <th scope="col" style="width: 100px" class="collapse @(ShowHouses ? "show" : "")">Greyjoy</th>
                        <th scope="col" style="width: 100px" class="collapse @(ShowHouses ? "show" : "")">Martell</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var playerVm in DivisionVm.Players)
                    {
                        <tr>
                            <th scope="row"><PlayerLink PlayerName="@playerVm.Name"></PlayerLink></th>
                            <td class="text-warning">@playerVm.TotalPoints</td>
                            @foreach (var tiebreaker in DivisionVm.Tiebreakers)
                            {
                                switch (tiebreaker)
                                {
                                    case Tiebreaker.Wins:
                                        <td>@playerVm.Wins</td>
                                        break;
                                    case Tiebreaker.Penalties:
                                        <td class="tt" ontouchstart="">
                                            <PenaltiesCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" PlayerVm="@playerVm"></PenaltiesCell>
                                        </td>
                                        break;
                                    case Tiebreaker.Cla:
                                        <td>@playerVm.Cla</td>
                                        break;
                                    case Tiebreaker.Supplies:
                                        <td>@playerVm.Supplies</td>
                                        break;
                                    case Tiebreaker.PowerTokens:
                                        <td>@playerVm.PowerTokens</td>
                                        break;
                                    case Tiebreaker.MinutesPerMove:
                                        <td>@Math.Round(playerVm.MinutesPerMove)</td>
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }
                            }
                            <td class="p-1 invisible border-0 collapse @(ShowHouses ? "show" : "")"></td>
                            <td class="collapse @(ShowHouses ? "show" : "") tt" ontouchstart="">
                                <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Baratheon)"></HouseCell>
                            </td>
                            <td class="collapse @(ShowHouses ? "show" : "") tt" ontouchstart="">
                                <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Lannister)"></HouseCell>
                            </td>
                            <td class="collapse @(ShowHouses ? "show" : "") tt" ontouchstart="">
                                <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Stark)"></HouseCell>
                            </td>
                            <td class="collapse @(ShowHouses ? "show" : "") tt" ontouchstart="">
                                <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Tyrell)"></HouseCell>
                            </td>
                            <td class="collapse @(ShowHouses ? "show" : "") tt" ontouchstart="">
                                <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Greyjoy)"></HouseCell>
                            </td>
                            <td class="collapse @(ShowHouses ? "show" : "") tt" ontouchstart="">
                                <HouseCell LeagueId="@LeagueId" SeasonId="@SeasonId" DivisionId="@DivisionId" HouseVm="@playerVm.GetHouse(House.Martell)"></HouseCell>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button class="col-lg-1 btn btn-primary" @onclick="ChangeVisibility">
            @if (ShowHouses)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="40" fill="currentColor" class="bi bi-chevron-compact-left" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M9.224 1.553a.5.5 0 0 1 .223.67L6.56 8l2.888 5.776a.5.5 0 1 1-.894.448l-3-6a.5.5 0 0 1 0-.448l3-6a.5.5 0 0 1 .67-.223z" />
                </svg>
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="40" fill="currentColor" class="bi bi-chevron-compact-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M6.776 1.553a.5.5 0 0 1 .671.223l3 6a.5.5 0 0 1 0 .448l-3 6a.5.5 0 1 1-.894-.448L9.44 8 6.553 2.224a.5.5 0 0 1 .223-.671z" />
                </svg>
            }
        </button>
    }
</div>

<footer class="text-white-50 d-block">
    @if (DivisionVm?.Judge != null)
    {
        <p class="mb-0">Division @DivisionVm.JudgeTitle: <MessageLink PlayerName="@DivisionVm?.Judge" />.</p>
    }
    @if (DivisionVm?.GeneratedTime != null)
    {
        <p class="mb-0">Data fetched at @DivisionVm.GeneratedTime.Value.LocalDateTime.ToString("yyyy-MM-dd hh:mm tt")</p>
    }
</footer>

@code {
    [Parameter]
    public string? LeagueId { get; set; }
    [Parameter]
    public string? SeasonId { get; set; }
    [Parameter]
    public string? DivisionId { get; set; }

    private DivisionViewModel? DivisionVm { get; set; }

    private bool ShowHouses { get; set; } = false;

    private void ChangeVisibility() => ShowHouses = !ShowHouses;

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        if (LeagueId == null || SeasonId == null || DivisionId == null)
            return;

        DivisionVm = await DivisionService.GetDivisionVm(LeagueId, SeasonId, DivisionId);

        _isInitialized = true;
    }
}